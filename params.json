{"name":"Tdtext.github.io","tagline":"How to create a The DataTank extension","body":"# tdtext\r\n\r\nHave you as well been dreaming about a world where it is possible for anyone to write a The DataTank extension and amaze the world of Open Data?\r\n\r\nWith tdtext, this should become possible. Just like people can easily create ckan extensions (ckanext, see what we did there?) with a minimum of documentation, you are able to create The DataTank extensions which plug into the workflow. The TDT extension systems is built for the ease of developers. Once a The DataTank is installed, it should be a breeze to install: scrapers, extra formatters, extra visualizations, strategies to read data, and so on.\r\n\r\n## Architecture ##\r\n\r\nA lot of classes in The DataTank become Observables. From the moment something happens in a certain object of such a class, an event will be triggered and the Observers will be updated about this event.\r\n\r\nOne observer will be the TdtextNotifier. TdtextNotifier stands for: The DataTank Extensions Notifier. It will detect the kind of event that happened, and will alert the right instances of an extension about this.\r\n\r\n_For the DataTank techies who are afraid of switching to this architecture: it only consists of making some classes splSubjects (http://www.php.net/manual/en/class.splsubject.php) and adding the right hooks. They will by default always have one observer: TdtextNotifier which will hold a list of all extensions installed and which interfaces they implement._\r\n\r\n## Repositories\r\n\r\nhttp://github.com/tdt/\r\n\r\nThe organisation for the repositories needed for the basic functionality of The DataTank (e.g. LTS 2013.12)\r\n\r\nhttp://github.com/tdtext\r\n\r\nThe organisation where we will add official extensions for The DataTank and a barebone repository which everyone can fork to start its own tdtextension.\r\nIt also contains docs at http://tdtext.github.io/ which can be edited at http://github.com/tdtext/tdtext.github.io.\r\n\r\n## Installing extensions using composer\r\n\r\nIf you're not familiar with composer, check out http://getcomposer.org/doc/00-intro.md.\r\n\r\n```bash\r\nextensionname= # Search for extensions at https://packagist.org/search/?q=tdtext\r\ncd /path/to/tdt/root/\r\ncomposer require tdtext/${extensionname}\r\ncomposer update # this will also trigger the code to enable the extension. You can disable it in your config.\r\n```\r\n\r\n## Writing a tdt extension\r\n\r\n* Fork the barebone tdtextension at http://github.com/tdtext/barebone \r\n* (Re)Name your git repository towards tdtext-{extensionname} (this will make your extension discoverable through https://packagist.org)\r\n* Add the description of your extension in composer.json\r\n* run composer update\r\n* Edit your class and start creating your extension\r\n\r\nOnce you have tested it by installing it locally, you can add it to packagist: https://packagist.org/packages/submit\r\n\r\n### The Interfaces (the hard way)\r\n\r\n#### tdt/core/tdtext/IRouteEditor\r\n\r\nWith the route mapper you can add a controller for a specific route. This may come in handy when you want to handle your \r\n\r\n```php\r\nInterface IRouteEditor {\r\n    abstract function editRoutes(&$routes); //add, remove or edit routes\r\n}\r\n```\r\n\r\n#### tdt/core/tdtext/IDefinitionsEditor\r\n\r\nWhen the documentation in tdt/core is ready, it will update the TdtextNotifier, which will in its turn notify all the extensions which implement this interface.\r\n\r\nYou can add your own documentation for a new resource if you want for instance to write a scraper (nice example in AScraper - see further)\r\n\r\n```php\r\nInterface IDefinitionsEditor {\r\n    abstract function editDefinitions(&$definitions);\r\n}\r\n```\r\n\r\n#### tdt/core/tdtext/IFormattersEditor\r\n\r\nWhen the documentation in tdt/core is ready, it will update the TdtextNotifier, which will in its turn notify all the extensions which implement this interface.\r\n\r\nYou can add your own documentation for a new resource if you want for instance to write a scraper (nice example in AScraper - see further)\r\n\r\n```php\r\nInterface IFormattersEditor {\r\n    /**\r\n    * Add or edit formatters in this array\r\n    */\r\n    abstract function editFormatters(&$formatters);\r\n}\r\n```\r\n\r\n#### tdt/core/tdtext/ITransformer\r\n\r\nA transformer transforms an object after it is read into memory.\r\n\r\n```php\r\nInterface ITransformer {\r\n   /**\r\n    * Add or edit an object from the moment is read into memory\r\n    * @param $resourceconfiguration contains the identifier of a resource and the configuration\r\n    * @param $object is the data object\r\n    */\r\n    abstract function transform($resourceconfiguration, &$object);\r\n}\r\n```\r\n\r\n\r\n...WIP\r\n\r\n### Using an abstract class (recommended)\r\n\r\n#### tdt/core/tdtext/AStrategy\r\n\r\nIf you want to implement a new strategy next to the standard ones for reading a certain source (e.g. a NoSQL cluster or a certain data format), extend this abstract class.\r\n\r\n```php\r\nabstract class AStrategy implements ... {\r\n\r\n    /**\r\n     * Returns an array according to the discovery API of parameter objects.\r\n     * They include the parameters needed to read a resource which's source uses this strategy.\r\n     */\r\n    abstract function getGETParameters();\r\n\r\n    /**\r\n     * Returns an array according to the discovery API of parameter objects.\r\n     * They include documentation about whether the parameter is required or not when configuring a source of this strategy type through a PUT request.\r\n     */\r\n    abstract function getConfigParameters();\r\n\r\n    /**\r\n     * when reading the a resource configured with this strategy, this is what's going to happen.\r\n     * The resourceconfiguration contains the resourceidentifier and the config parameters (as defined by the getConfigParameters() function)\r\n     */\r\n    abstract function read($resourceconfiguration, $parameters);\r\n}\r\n```\r\n\r\n#### tdt/core/tdtext/AFormatter\r\n\r\nWrite a new behaviour for a certain format.\r\n\r\n```php\r\nabstract class AFormatter implements IFormattersEditor {\r\n    $name = \"\";\r\n\r\n    /**\r\n     * @param $name e.g. \"JSON\"\r\n     */\r\n    public function __construct($name){\r\n        $this->name = $name;\r\n    }\r\n\r\n    function editFormatters(&$formatters){\r\n        $formatters[$this->name] = get_class($this); //Question: does this work across namespaces?\r\n    }\r\n\r\n    /**\r\n     * Returns an array according to the discovery API of parameter objects.\r\n     * They include extra parameters which may be given to a formatter\r\n     * e.g. for a chart visualization, you might want to ask which fields to use, or for CSV, you might want to ask for the delimiter to use.\r\n     */\r\n    abstract function getGETParameters();\r\n\r\n    /**\r\n     * when reading the a resource configured with this strategy, this is what's going to happen.\r\n     * @param $parameters both contains the formatter parameters as the resource parameter\r\n     * @param $resourceconfiguration contains the resourceidentifier and the config parameters\r\n     * @param $object the object to print\r\n     */\r\n    abstract function print($resourceconfiguration, $parameters, $object);\r\n}\r\n```\r\n\r\n#### tdt/core/tdtext/AScraper\r\n\r\nWriting a scraper can be done easily by extending the AScraper class. Use this class if you want to have a certain URI in The DataTank to scrape data from a certain source.\r\n\r\n```php\r\nabstract class AScraper implements IDefinitionsEditor, IRouteEditor {\r\n\r\n    /**\r\n     * @param $resourceidentifier the path of the \r\n     */\r\n    public function __construct($resourceidentifier){\r\n        $this->resourceidentifier = $resourceidentifier;  \r\n    }\r\n    \r\n    /**\r\n     * @override\r\n     */\r\n    public function editRoutes(&$routes){\r\n        $routes[$resourceidentifier] = get_class($this);\r\n    }\r\n\r\n    public function editDefinitions(&$definitions){\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns an array according to the discovery API of parameter objects.\r\n     * They include the parameters needed to read a resource which's source uses this strategy.\r\n     */\r\n    abstract function getGETParameters();\r\n\r\n    abstract function read($parameters);\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}